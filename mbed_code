
#include "mbed.h"
#include <exception>
#include "Ticker.h"

float TI = 0.02; // 1kHz sample time
// float Kcrit = 0.25;
// float Tcrit = 1.5;
// float KP = 0.7*Kcrit; // Proportional Gain
// float KI = 1.2*Kcrit/Tcrit; // Integral Gain
// float KD = 0.075*Kcrit/Tcrit; // Derivative Gain
float KP = 0.25; // Proportional Gain
float KD = 0.01; // Derivative Gain
float KI = 0;
float e = 0;
float feedback = 0;
float controlAction = 0.0;
float previousError = 0.0;
float errorChange = 0.0;
float integralSum = 0.0;
float controllerOutput = 0.0;
float reference = 0.0;
float senSlope = 13; //13
float center = 0.066; // 0.066
float control_threshold = 0.01; //0.01
float bias_constant = 0.1; // constant that is added to the value from right inductive sensor to center the car

// comment everything else out when running this function, it prints the sensor values for calibration
void calibrate_sensors(AnalogIn &inductor1, AnalogIn &inductor2, PwmOut &servo)
{
    servo.write(center);
    printf("Left inductor: %3.3f", inductor1.read());
    printf("    Right inductor: %3.3f", inductor2.read());
    printf("    Difference: %3.3f\n\n", inductor1.read()-inductor2.read());
}

// maps input value from its original bounds to desired output bounds
float map(float x, float in_min, float in_max, float out_min, float out_max)
    {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void steering_control()
{
    e = reference - feedback;
    if(abs(e) < 0.01){
        integralSum = 0;
    }
    errorChange = (e - previousError)/TI; // Euler approximation of derivative
    integralSum += e*TI;
    controlAction = KP*e + KD*errorChange + KI*integralSum;
    previousError = e;
}

// Takes the average of however many samples from the left and right sensors before calculating sensor feedback
void get_feedback(AnalogIn &inductor1, AnalogIn &inductor2) {
    float left_sensor_sum = 0;
    float right_sensor_sum = 0;
    int samples = 100;
    for (int i = 0; i < samples; i++) {
        left_sensor_sum += inductor1.read(); // left sensor is inductor 1
        right_sensor_sum += inductor2.read(); // right sensor is inductor 2
    }
    float left_sensor_avg = left_sensor_sum/samples;
    float right_sensor_avg = right_sensor_sum/samples + bias_constant;
    printf("   left inductor: %3.3f", left_sensor_avg);
    printf("   right inductor: %3.3f", right_sensor_avg);
    feedback = (left_sensor_avg - right_sensor_avg)/senSlope;
}

InterruptIn Button(BUTTON1);

bool buttonPressed = false;
bool programRunning = false;

void onButtonPress() {
    buttonPressed = true; // Set the flag when button is pressed
}

int main()
{
    AnalogIn inductor1(A2); // input from inductor 1 (left)
    AnalogIn inductor2(A0); // input from inductor 2 (right)
    AnalogIn detectLeft(A3);
    AnalogIn detectRight(A4);
    PwmOut servo(D3); // PWM output to servo
    DigitalOut motor(D10); // PWM output to motor

    servo.period_ms(20); // set servo frequency to 50 Hz (20 ms period)

    Ticker steering_ticker;
    steering_ticker.attach(&steering_control,TI);

    Button.fall(&onButtonPress);

    while (true) {
        // calibrate_sensors(inductor1, inductor2, servo);
        // Check if the button was pressed
        if (buttonPressed) {
            buttonPressed = false; // Reset the flag

            // Toggle the program running state
            programRunning = !programRunning;

            if (programRunning) {
                printf("Button pressed! Starting program...\n");
                // Turn motor on
            } else {
                printf("Button pressed! Stopping program...\n");
                // Turn motor off
            }
        }
        if (programRunning) {
            get_feedback(inductor1, inductor2);
            // printf("    left signal: %3.3f", detectLeft.read());
            // printf("    right signal: %3.3f", detectRight.read());
            // printf("   error: %3.3f", e);
            // printf("   integralSum: %3.3f", integralSum);
            printf("   u: %3.3f", controlAction);
            if(abs(controlAction) < 0.02){ // input protection for servo motor
                float percent_change = ((center+controlAction)-servo.read())/servo.read();
                printf("    percent change: %3.3f", percent_change);
                if (abs(percent_change) > control_threshold){
                    servo.write(center+controlAction); // Only implements new control action if percent change is above control threshold
                }
            }
            else{
                controlAction = controlAction/controlAction*0.02;
                servo.write(center+controlAction);
            }
            printf("   servo position: %3.3f% \n\n", servo.read());
            
        }
    }
}
