#include "mbed.h"
#include <exception>
#include "Ticker.h"

float TI = 0.01; // 1kHz sample time
float KP = 0.35; // Proportional Gain
float KD = 0.01; // Derivative Gain
float e = 0;
float feedback = 0;
float controlAction = 0.0;
float previousError = 0.0;
float errorChange = 0.0;
float controllerOutput = 0.0;
float reference = 0.0;
float senSlope = 14;
float center = 0.068;
float control_threshold = 0.035;


// maps input value from its original bounds to desired output bounds
float map(float x, float in_min, float in_max, float out_min, float out_max)
    {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void steering_control()
{
    e = reference - feedback;
    errorChange = (e - previousError)/TI;
    controlAction = KP*e + KD*errorChange;
    previousError = e;
}

// Takes the average of however many samples from the left and right sensors before calculating sensor feedback
void get_feedback(AnalogIn &inductor1, AnalogIn &inductor2) {
    float left_sensor_sum = 0;
    float right_sensor_sum = 0;
    int samples = 10;
    for (int i = 0; i < samples; i++) {
        left_sensor_sum += inductor1.read();
        right_sensor_sum += inductor2.read();
    }
    float left_sensor_avg = left_sensor_sum/samples;
    float right_sensor_avg = right_sensor_sum/samples;
    printf("   left sensor: %3.3f%", left_sensor_avg);
    printf("   right sensor: %3.3f%", right_sensor_avg);
    feedback = (left_sensor_avg - right_sensor_avg)/senSlope;
}

int main()
{
    AnalogIn ain(A0); // input from voltage divider
    AnalogIn inductor1(A2); // input from inductor 1
    AnalogIn inductor2(A1); // input from inductor 2
    PwmOut servo(D3); // PWM output to servo

    servo.period_ms(20); // set servo frequency to 50 Hz (20 ms period)

    Ticker steering_ticker;
    steering_ticker.attach(&steering_control,TI);

    while (true) {
        get_feedback(inductor1, inductor2);
        printf("   feedback: %3.3f", feedback);
        printf("   u: %3.3f", controlAction);
        if(abs(controlAction) < 0.02){ // input protection for servo motor
            float percent_change = ((center+controlAction)-servo.read())/servo.read();
            printf("    percent change: %3.3f", percent_change);
            if (abs(percent_change) > control_threshold){
                servo.write(center+controlAction); // Only implements new control action if percent change is above control threshold
            }
        }
        else{
            controlAction = controlAction/controlAction*0.02;
            servo.write(center+controlAction);
        }
        printf("   servo position: %3.3f% \n\n", servo.read());
        
    }
}
